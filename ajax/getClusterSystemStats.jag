<%
var log = new Log("appmonitor.index.ajaxcall");
var error=[];
var caramel = require('caramel');
var panelData, panelDataObject, cores, memory;

var timestamp = request.getParameter('timestamp'),
        cluster_name = request.getParameter('cluster_name');

include("../config/config.jag");

try{
    var	data='',
            header={"Accept":"application/json", },
            panelData = get(endpoint_url+'/clusters/'+cluster_name+'/systemstats/'+timestamp, data, header);
}catch(e){
    log.warn('EndpointError' + e);
    error = {'EndpointError': e};
}

var cpu_data=[], 
        mem_data=[];

var panelDataParse= parse(panelData.data);

for ( var key in panelDataParse) {
    if(key.toString() != 'Fault') {
        for ( var key2 in panelDataParse[key]) {
            for ( var key3 in panelDataParse[key][key2]) {
                
                var reported_time = panelDataParse[key][key2][key3]["reported-time"];
                var avg_load = panelDataParse[key][key2][key3]["avg-load"];
                var cpu_temp =  [ reported_time.toString() * 1000, avg_load.toString() ] ;
                var memory_usage = panelDataParse[key][key2][key3]["memory-usage"];
                var mem_temp = [reported_time.toString() * 1000 , memory_usage.toString()] ;
                cpu_data.push(cpu_temp);
                mem_data.push(mem_temp);
                
            }
        }  
    }

};

//getting HB data
var testCountTotal=0, testCountPassed = 0,testCountFailed=0, testCountPassedRatio=0, testavailability=false;

try{
    var data='',
            header={"Accept":"application/json", },
            testData = get(endpoint_url+'/heartbeat/'+cluster_name, data, header);
    parseTestData = JSON.parse(testData.data);

    for(var key in parseTestData['heartbeat']['service']){
        if(parseTestData['heartbeat']['service'][key]['status']){
            testCountPassed += 1;
        }
        testCountTotal += 1;
    }
}catch(e){

}

testCountFailed = testCountTotal - testCountPassed;

//getting cores and memory
try{
    var data='',
            header={"Accept":"application/json", },
            testData = get(endpoint_url+'/clusters/'+cluster_name+'/systemspecs', data, header);
    system_specs = JSON.parse(testData.data);
    memory = system_specs["cluster"]["total-memory"];
    cores = system_specs["cluster"]["cores"];
}catch(e){

}

if(error.length==0){
    print({"cpu_data":cpu_data, "memory_data": mem_data , "failedTest": testCountFailed, "cores": cores, "memory": memory.toFixed(2), "errorMessage": ''});
}else{
    print(error);
}